use std::path::Path;

// It'll include the res.rs file generated by the build.rs,
// that include all resources in res/ folder inside the binary
// in the RES.
include!(concat!(env!("OUT_DIR"), "/res.rs"));

// Returns a String of the file, trying first to look into the filesystem,
// if we cannot fint it, we try to find it in the RES that is some default
// resources compiled with the binary and are available in the res/ fold in the repo.
pub fn get_resource_file_fs_or_res(path: String) -> Option<String> {
    match std::fs::read_to_string(path.clone()) {
        Ok(file_string) => Some(file_string),
        Err(e) => {
            log::debug!("get_resource_file_fs_or_res(): std::fs::read_to_string(path): Error: {}, trying on RES.", e);

            RES.get(path.as_str()).map(|s| s.to_string())
        }
    }
}

// Returns a bool if the file path exists in RES or fs.
pub fn exists_resource_file_fs_or_res(path: &str) -> bool {
    RES.contains_key(path) || Path::new(path).exists()
}
